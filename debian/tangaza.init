#! /bin/sh
# Copyright (c) 2008 Nokia.  All Rights Reserved.

# Start/stop tangaza

### BEGIN INIT INFO
# Provides:          tangaza
# Required-Start:    $remote_fs
# Required-Stop:     $remote_fs
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Tangaza group communication service
# Description:       Tangaza is a group communication service that supports both voice and text
### END INIT INFO

# Author: Billy Odero
#

# Do NOT "set -e"

# PATH should only include /usr/* if it runs after the mountnfs.sh script

NASI_PATH=/usr/lib/tangaza/agi-bin
DESC="Tangaza group communication service"
NAME=tangaza
#DAEMON=/usr/sbin/$NAME
#DAEMON_ARGS="--options args"
PIDFILES=/var/run/$NAME
SCRIPTNAME=/etc/init.d/$NAME

#set USER to be same as asterisk user
AST_PATH=`which asterisk`
USER=`ps aux|grep -i $AST_PATH|awk '!/grep/'|awk 'NR < 2 {print $1}'`

# Exit if the package is not installed
#[ -x "$DAEMON" ] || exit 0

# Read configuration variable file if it is present
[ -r /etc/default/$NAME ] && . /etc/default/$NAME

[ ! -d $PIDFILES ] && mkdir $PIDFILES 

# Load the VERBOSE setting and other rcS variables
#. /lib/init/vars.sh

# Define LSB log_* functions.
log_end_msg() {
        echo $1
}

log_daemon_msg() {
        echo $1
}

# Depend on lsb-base (>= 3.0-6) to ensure that this file is present.
#. /lib/lsb/init-functions

#
# Function that starts the daemon/service
#
do_start()
{
	# Return
	#   0 if daemon has been started
	#   1 if daemon was already running
	#   2 if daemon could not be started
	
	echo "Running tangaza"
	
	DAEMON=$NASI_PATH/tangaza.agi
	start-stop-daemon --start --quiet --make-pidfile --pidfile $PIDFILES/tangaza.pid --chuid=$USER --exec $DAEMON --background --test > /dev/null \
		|| return 1
	start-stop-daemon --start --quiet --make-pidfile --pidfile $PIDFILES/tangaza.pid --chuid=$USER --exec $DAEMON --background -- \
		|| return 2
	
	echo "Running cb-tangaza"
	DAEMON=$NASI_PATH/cb-tangaza.agi
	start-stop-daemon --start --quiet --make-pidfile --pidfile $PIDFILES/cb-tangaza.pid --chuid=$USER --exec $DAEMON --background
	
	echo "Running sms-send-daemon"
	DAEMON=$NASI_PATH/../daemon/sms-send-daemon.pl
        start-stop-daemon --start --quiet --make-pidfile --pidfile $PIDFILES/sms-send-daemon.pid --chuid=$USER --exec $DAEMON --background
	
	# Add code here, if necessary, that waits for the process to be ready
	# to handle requests from services started subsequently which depend
	# on this one.  As a last resort, sleep for some time.
}

#
# Function that stops the daemon/service
#
do_stop()
{
	# Return
	#   0 if daemon has been stopped
	#   1 if daemon was already stopped
	#   2 if daemon could not be stopped
	#   other if a failure occurred
	echo "Stopping tangaza"
	start-stop-daemon --stop --quiet --retry=TERM/30/KILL/5 --pidfile $PIDFILES/tangaza.pid --name $NAME
	RETVAL="$?"
	#[ "$RETVAL" = 2 ] && return 2
	# Wait for children to finish too if this is a daemon that forks
	# and if the daemon is only ever run from this initscript.
	# If the above conditions are not satisfied then add some other code
	# that waits for the process to drop all resources that could be
	# needed by services started subsequently.  A last resort is to
	# sleep for some time.
	#start-stop-daemon --stop --quiet --oknodo --retry=0/30/KILL/5 --exec $DAEMON
	#[ "$?" = 2 ] && return 2
	
	echo "Stopping cb-tangaza"
	start-stop-daemon --stop --quiet --retry=TERM/30/KILL/5 --pidfile $PIDFILES/cb-tangaza.pid
	
	echo "Stopping sms-send-daemon"
	start-stop-daemon --stop --quiet --retry=TERM/30/KILL/5 --pidfile $PIDFILES/sms-send-daemon.pid
	
	kill `ps aux | grep -i tangaza.agi | grep -i $USER | awk '{print $2}'` | sort -r
	kill `ps aux | grep -i sms-send-daemon.pl | grep -i $USER | awk '{print $2}'` | sort -r
	
	# Many daemons don't delete their pidfiles when they exit.
	rm -rf $PIDFILES/*
	#return "$RETVAL"
}

#
# Function that sends a SIGHUP to the daemon/service
#
do_reload() {
	#
	# If the daemon can reload its configuration without
	# restarting (for example, when it is sent a SIGHUP),
	# then implement that here.
	#
	start-stop-daemon --stop --signal 1 --quiet --pidfile $PIDFILE --name $NAME
	return 0
}

case "$1" in
  start)
	[ "$VERBOSE" != no ] && log_daemon_msg "Starting $DESC" #"$NAME"
	
	do_start
	case "$?" in
		0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
		2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
	esac
	;;
  stop)
	[ "$VERBOSE" != no ] && log_daemon_msg "Stopping $DESC" #"$NAME"
	
	do_stop
	case "$?" in
		0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
		2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
	esac
	;;
  #reload|force-reload)
	#
	# If do_reload() is not implemented then leave this commented out
	# and leave 'force-reload' as an alias for 'restart'.
	#
	#log_daemon_msg "Reloading $DESC" "$NAME"
	#do_reload
	#log_end_msg $?
	#;;
  restart|force-reload)
	#
	# If the "reload" option is implemented then remove the
	# 'force-reload' alias
	#
	log_daemon_msg "Restarting $DESC" #"$NAME"
	#echo -n "Restarting $DESC" "$NAME"  
	
	do_stop
	case "$?" in
	  0|1)
		do_start
		case "$?" in
			0) log_end_msg 0 ;;
			1) log_end_msg 1 ;; # Old process is still running
			*) log_end_msg 1 ;; # Failed to start
		esac
		;;
	  *)
	  	# Failed to stop
		log_end_msg 1
		;;
	esac
	;;
  *)
	#echo "Usage: $SCRIPTNAME {start|stop|restart|reload|force-reload}" >&2
	echo "Usage: $SCRIPTNAME {start|stop|restart|force-reload}" >&2
	exit 3
	;;
esac

:
